using System.Linq.Expressions;
using System.Security.Claims;
using AutoMapper;
using FluentValidation;
using WashBooking.Application.Common.Settings.StateManagement;
using WashBooking.Application.DTOs.BookingDTO;
using WashBooking.Application.DTOs.BookingDTO.Request;
using WashBooking.Application.DTOs.BookingDTO.Response;
using WashBooking.Application.DTOs.ServiceDTO;
using WashBooking.Application.DTOs.ServiceDTO.Response;
using WashBooking.Application.Interfaces.Booking;
using WashBooking.Domain.Common;
using WashBooking.Domain.Entities;
using WashBooking.Domain.Enums;
using WashBooking.Domain.Interfaces.Persistence;

namespace WashBooking.Application.Services;

public class BookingService : IBookingService
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;
    private readonly IValidator<UpdateBookingRequest> _updateBookingRequestValidator;
    private readonly IValidator<GetPagedRequest> _getPagedRequestValidator;
    private readonly IValidator<UpdateBookingStatusRequest> _updateBookingStatusRequestValidator;
    
    public BookingService(IUnitOfWork unitOfWork, IMapper mapper, IValidator<UpdateBookingRequest> updateBookingRequestValidator, IValidator<GetPagedRequest> getPagedRequestValidator, IValidator<UpdateBookingStatusRequest> updateBookingStatusRequestValidator)
    {
        _unitOfWork = unitOfWork;
        _mapper = mapper;
        _updateBookingRequestValidator = updateBookingRequestValidator;
        _getPagedRequestValidator = getPagedRequestValidator;
        _updateBookingStatusRequestValidator = updateBookingStatusRequestValidator;
    }
    
    public async Task<Result> UpdateBookingAsync(Guid id, UpdateBookingRequest request)
    {
        // 1Ô∏è‚É£ L·∫•y booking hi·ªán t·∫°i
        var booking = await _unitOfWork.BookingRepository.GetAllInfoBookingByIdAsync(id);

        if (booking is null)
            return Result.Failure(new Error("Booking.Update.NotFound", $"Not found booking with id: {id}."));

        if (booking.Status == BookingStatus.Completed)
            return Result.Failure(new Error("Booking.Update.Completed", "Booking is completed. You can't update it."));

        // 2Ô∏è‚É£ Validate request
        var validationResult = _updateBookingRequestValidator.Validate(request);
        if (!validationResult.IsValid)
        {
            var errors = validationResult.Errors
                .Select(e => new Error("Booking.Update.Validation", e.ErrorMessage))
                .ToList();
            return Result.Failure(errors);
        }

        // 3Ô∏è‚É£ Map c√°c field ƒë∆°n gi·∫£n (b·ªè qua BookingDetails)
        _mapper.Map(request, booking);
        booking.UpdatedAt = DateTime.UtcNow;

        // 4Ô∏è‚É£ Chu·∫©n b·ªã d·ªØ li·ªáu c≈© v√† m·ªõi
        var existingDetails = booking.BookingDetails.ToList();
        var requestDetails = request.Items ?? new List<BookingItemRequest>();

        // 5Ô∏è‚É£ Th√™m c√°c detail m·ªõi
        foreach (var detailReq in requestDetails)
        {

            if (detailReq.Id is null)
            {
                // üÜï Detail m·ªõi
                var newDetail = _mapper.Map<BookingDetail>(detailReq);
                newDetail.BookingId = booking.Id;
                newDetail.CreatedAt = DateTime.UtcNow;
                newDetail.Status = BookingStatus.Scheduled; // auto h·ªá th·ªëng set

                await _unitOfWork.BookingDetailRepository.AddAsync(newDetail);

                // ‚ûï Ghi log progress
                var progress = new BookingDetailProgress
                {
                    BookingDetail = newDetail,
                    Status = BookingStatus.Scheduled,
                    Note = "Booking detail has been automatically created by the system.",
                    CreatedAt = DateTime.UtcNow
                };
                await _unitOfWork.BookingDetailProgressRepository.AddAsync(progress);
            }
            else
            {
                var existingDetail = existingDetails.FirstOrDefault(d => d.Id == detailReq.Id);
                if (existingDetail != null)
                {
                    _mapper.Map(detailReq, existingDetail);
                    existingDetail.UpdatedAt = DateTime.UtcNow;
                }

            }
        }

        // 6Ô∏è‚É£ X·ª≠ l√Ω c√°c detail b·ªã x√≥a kh·ªèi request ‚Üí h·ªá th·ªëng t·ª± c·∫≠p nh·∫≠t sang Cancelled
        var removedDetails = existingDetails
            .Where(d => !requestDetails.Any(r => r.Id == d.Id))
            .ToList();

        foreach (var removed in removedDetails)
        {
            if (removed.Status != BookingStatus.Cancelled)
            {
                removed.Status = BookingStatus.Cancelled;
                removed.UpdatedAt = DateTime.UtcNow;

                var progress = new BookingDetailProgress
                {
                    BookingDetailId = removed.Id,
                    Status = BookingStatus.Cancelled,
                    Note = "Booking detail has been automatically cancelled by the system.",
                    CreatedAt = DateTime.UtcNow
                };
                await _unitOfWork.BookingDetailProgressRepository.AddAsync(progress);
            }
        }

        // 7Ô∏è‚É£ L∆∞u t·∫•t c·∫£ thay ƒë·ªïi
        try
        {
            // ‚úÖ Th√™m d√≤ng n√†y ƒë·ªÉ ƒë√°nh d·∫•u entity Booking ƒë√£ thay ƒë·ªïi
            _unitOfWork.BookingRepository.Update(booking);
            
            await _unitOfWork.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            return Result.Failure(new Error("Booking.Update.Database.Error",
                $"Update booking failed. Please try again later. Error: {ex.Message}"));
        }

        return Result.Success();
    }

    public async Task<Result> UpdateStatusBookingAsync(Guid id, UpdateBookingStatusRequest updateBookingStatusRequest)
    {
        var validationResult = _updateBookingStatusRequestValidator.Validate(updateBookingStatusRequest);
        if (!validationResult.IsValid)
        {
            var errors = validationResult.Errors
                .Select(e => new Error("Booking.UpdateStatusBooking.Validation", e.ErrorMessage))
                .ToList();
            return Result.Failure(errors);
        }
        
        var booking = await _unitOfWork.BookingRepository.GetByIdAsync(id);
        if (booking is null)
            return Result.Failure(new Error("Booking.UpdateStatusBooking.NotFound", "Booking not found"));
        
        if (!BookingStateTransitions.CanTransitionTo(booking.Status, updateBookingStatusRequest.NewStatus))
        {
            return Result.Failure(new Error("Service.Complete.InvalidTransition", 
                $"Cannot complete service from the current status '{booking.Status}'."));
        }
        
        _mapper.Map(updateBookingStatusRequest, booking);

        try
        {
            await _unitOfWork.SaveChangesAsync();      
        }
        catch (Exception e)
        {
            return Result.Failure(new Error("Booking.UpdateStatusBooking.Database.Error", "Update failed. Please try again later."));      
        }
        
        return Result.Success();
    }

    public async Task<Result> DeleteBookingAsync(Guid id)
    {
        var booking = await _unitOfWork.BookingRepository.GetByIdAsync(id);
        if (booking is null)
        {
            return Result.Failure(new Error("Booking.Delete.NotFound", "Booking not found"));       
        }

        booking.Status = BookingStatus.Cancelled;
        try
        {
            await _unitOfWork.SaveChangesAsync();       
        }
        catch (Exception e)
        {
            return Result.Failure(new Error("Booking.Delete.Database.Error", "Booking delete failed. Please try again later."));       
        }
        return Result.Success();
    }

    public async Task<Result<PagedResult<AdminBookingDetailResponse>>> GetBookingsAsync(GetPagedRequest getPagedRequest)
    {
        var validationResult = await _getPagedRequestValidator.ValidateAsync(getPagedRequest);
        if (!validationResult.IsValid)
        {
            var errors = validationResult.Errors
                .Select(e => new Error("Booking.GetPaged.Validation", e.ErrorMessage))
                .ToList();
            return Result<PagedResult<AdminBookingDetailResponse>>.Failure(errors);
        }

        Expression<Func<Booking, bool>>? filter = null;
        if (!string.IsNullOrWhiteSpace(getPagedRequest.Search))
        {
            filter = b => 
                b.CustomerName.Contains(getPagedRequest.Search) || 
                b.CustomerPhone.Contains(getPagedRequest.Search) || 
                b.CustomerEmail.Contains(getPagedRequest.Search) || 
                b.BookingCode.Contains(getPagedRequest.Search);
        }

        var result =
            await _unitOfWork.BookingRepository.GetPagedAsync(getPagedRequest.PageIndex, getPagedRequest.PageSize,
                filter);
        
        var bookingDtos = _mapper.Map<PagedResult<AdminBookingDetailResponse>>(result);
        return Result<PagedResult<AdminBookingDetailResponse>>.Success(bookingDtos);
    }

    public async Task<Result<object>> GetBookingByIdAsync(Guid id, ClaimsPrincipal? user)
    {
        var booking = await _unitOfWork.BookingRepository.GetAllInfoBookingByIdAsync(id);
        if (booking is null)
        {
            return Result<object>.Failure(new Error("Booking.GetById.NotFound", "Booking not found"));
        }
        if (user is not null && user.Identity is { IsAuthenticated: true })
        {
            // === V√íNG KI·ªÇM TRA 1: B·∫†N C√ì PH·∫¢I L√Ä ADMIN/STAFF KH√îNG? ===
            if (user.IsInRole("Admin") || user.IsInRole("Staff"))
            {
                // N·∫øu ƒë√∫ng -> Tr·∫£ v·ªÅ "g√≥c nh√¨n" chi ti·∫øt nh·∫•t
                var staffDto = _mapper.Map<StaffBookingDetailResponse>(booking);
                return Result<object>.Success(staffDto);
            }
        
            // === V√íNG KI·ªÇM TRA 2: N·∫æU KH√îNG, B·∫†N C√ì PH·∫¢I L√Ä CH·ª¶ S·ªû H·ªÆU KH√îNG? ===
            var userIdString = user.FindFirst(ClaimTypes.NameIdentifier).Value;
            if (Guid.TryParse(userIdString, out var userId) && booking.UserProfileId == userId)
            {
                // N·∫øu ƒë√∫ng -> Tr·∫£ v·ªÅ "g√≥c nh√¨n" c·ªßa kh√°ch h√†ng
                var customerDto = _mapper.Map<CustomerBookingDetailResponse>(booking);
                return Result<object>.Success(customerDto);
            }
        }
    
        // === TR∆Ø·ªúNG H·ª¢P M·∫∂C ƒê·ªäNH ===
        // N·∫øu b·∫°n l√† Guest, ho·∫∑c ƒë√£ ƒëƒÉng nh·∫≠p nh∆∞ng kh√¥ng ph·∫£i Admin/Staff v√† c≈©ng kh√¥ng ph·∫£i ch·ªß s·ªü h·ªØu
        return Result<object>.Failure(new Error("Auth.Forbidden", "B·∫°n kh√¥ng c√≥ quy·ªÅn xem l·ªãch h·∫πn n√†y."));

    }

    public async Task<Result<object>> TrackByCodeAsync(string bookingCode, ClaimsPrincipal? user)
    {
        var booking = await _unitOfWork.BookingRepository.GetBookingByBookingCodeAsync(bookingCode);
        var userIdString = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (booking is null)
        {
            return Result<object>.Failure(new Error("Booking.Track.NotFound", "Booking not found"));
        }

        if (user is not null && user.Identity.IsAuthenticated)
        {
            if (user.IsInRole("Admin"))
            {
                var adminDto = _mapper.Map<AdminBookingDetailResponse>(booking);
                return Result<object>.Success(adminDto);
            }
            else if (user.IsInRole("Staff"))
            {
                var staffDto = _mapper.Map<StaffBookingDetailResponse>(booking);
                return Result<object>.Success(staffDto);
            }
            else if (Guid.TryParse(userIdString, out var userId) && booking.UserProfileId == userId)
            {
                var customerDto = _mapper.Map<CustomerBookingDetailResponse>(booking);
                return Result<object>.Success(customerDto);
            }
        }
        
        var guestDto = _mapper.Map<GuestBookingStatusResponse>(booking);
        return Result<object>.Success(guestDto);
    }
    
    public async Task<Result<List<CustomerBookingDetailResponse>>> GetMyBooking(ClaimsPrincipal? user)
    {
        if (user is null || user.Identity is null || !user.Identity.IsAuthenticated)
        {
            return Result<List<CustomerBookingDetailResponse>>.Failure(new Error("Booking.MyBooking.Forbidden", "User is not authenticated."));
        }

        var userIdString = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (!Guid.TryParse(userIdString, out var userId))
        {
            return Result<List<CustomerBookingDetailResponse>>.Failure(new Error("Booking.MyBooking.InvalidUser", "Invalid user id."));
        }

        var bookings = await _unitOfWork.BookingRepository.GetAllBookingByUserIdAsync(userId);
        if (bookings == null || bookings.Count == 0)
        {
            return Result<List<CustomerBookingDetailResponse>>.Failure(new Error("Booking.MyBooking.NotFound", "Booking not found"));
        }
        
        var customerDto = _mapper.Map<List<CustomerBookingDetailResponse>>(bookings);
        return Result<List<CustomerBookingDetailResponse>>.Success(customerDto);
    }


}